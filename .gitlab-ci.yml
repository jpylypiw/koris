stages:
 - static-analysis
 - unittest
 - integration-test
 - cleanup

static-analysis:
  stage: static-analysis
  image: mleiner/kolt-base:0.2
  script:
    - pip3 install flake8 pylint pylint-exit
    - make lint

unittest:
  stage: unittest
  image: mleiner/kolt-base:0.2
  script:
    - pip3 install -e .
    - make coverage PY=python3

integration-test:
  stage: integration-test
  image: mleiner/kolt-base:0.2
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  artifacts:
    paths:
    - tests/koris_test.yml
    expire_in: 1 week
  script:
  - "pip3 install  -r requirements.txt"
  - "pip3 install -e ."
  - "mkdir  koris-install  && cd koris-install && python3 -m venv koris-env"
  - "source ./koris-env/bin/activate"
  - "cd -"
  - "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && mv kubectl /usr/local/bin/kubectl  && chmod  777  /usr/local/bin/kubectl"
  - sed -i "s/%%CLUSTER_NAME%%/koris-pipe-line-$(git rev-parse --short HEAD)/g" tests/koris_test.yml
  - sed -i "s/%%date%%/$(date '+%Y-%m-%d')/g" tests/koris_test.yml
  - cat tests/koris_test.yml
  - kolt k8s tests/koris_test.yml
  - export KUBECONFIG=koris-pipe-line-$(git rev-parse --short HEAD)-admin.conf
  - echo $KUBECONFIG
  - kubectl get nodes
  - kubectl run nginx --image=nginx --port=80
  - kubectl patch deployment.apps nginx -p '{"spec":{"template":{"metadata":{"annotations":{"service.beta.kubernetes.io/openstack-internal-load-balancer":"true"}}}}}'
  - kubectl expose deployment nginx --type=LoadBalancer --name=nginx
  - sleep 200
  - kubectl get services
  - kubectl get pods
  - curl http://$(kubectl describe svc nginx | grep "LoadBalancer Ingress" | cut  -d":" -f2 | tr -d " ")

master-security-checks:
  stage: master-security-checks
  image: mleiner/kolt-base:0.2
  dependencies:
    - integration-test
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  script:
  - "pip3 install -r requirements.txt"
  - "pip3 install -e ."
  - "mkdir  koris-install  && cd koris-install && python3 -m venv koris-env"
  - "source ./koris-env/bin/activate"
  - "cd -"
  - "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && mv kubectl /usr/local/bin/kubectl  && chmod  777  /usr/local/bin/kubectl"
  - kubectl get services
  - kubectl get pods
  - 'kubectl run --rm -i -t kube-bench-master --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \"apiVersion\": \"v1\", \"spec\": { \"hostPID\": true, \"nodeSelector\": { \"node-role.kubernetes.io/master\": \"true\" }, \"tolerations\": [ { \"key\": \"node-role.kubernetes.io/master\", \"operator\": \"Exists\", \"effect\": \"NoSchedule\" } ] } }" -- master --version 1.8'

cleanup:
  stage: cleanup
  image: mleiner/kolt-base:0.2
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  script:
  - "pip3 install  -r requirements.txt"
  - "pip3 install -e ."
  - "mkdir  koris-install  && cd koris-install && python3 -m venv koris-env"
  - "source ./koris-env/bin/activate"
  - "cd -"
  - sed -i "s/%%CLUSTER_NAME%%/koris-pipe-line-$(git rev-parse --short HEAD)/g" tests/koris_test.yml
  - sed -i "s/%%date%%/$(date '+%Y-%m-%d')/g" tests/koris_test.yml
  - kolt destroy tests/koris_test.yml --force
  when: always
