stages:
 - static-analysis
 - unittest
 - build-cluster
 - integration-test
 - master-security-checks
 - cleanup
 - pages

static-analysis:
  stage: static-analysis
  image: oz123/koris-alpine:0.1.1
  script:
    - apk add --update py3-cryptography python3-dev libffi-dev libressl-dev
    - pip3 install -U pip
    - pip3 install flake8 pylint pylint-exit
    - make lint

unittest:
  stage: unittest
  image: oz123/koris-alpine:0.1.1
  script:
    - apk add --update py3-cryptography python3-dev libffi-dev
    - pip3 install -U pip
    - pip3 install -e .
    - make coverage PY=python3

build-cluster:
  stage: build-cluster
  image: oz123/koris-alpine:0.1.1
  script:
  - apk add --update py3-cryptography python3-dev libffi-dev libressl-dev make
  - "pip3 install  -r requirements.txt"
  - "pip3 install -e ."
  - make launch-cluster
  - kubectl get nodes --kubeconfig=koris-pipe-line-$(git rev-parse --short HEAD)-admin.conf
  - ls -l
  artifacts:
    paths:
      - "certs-koris-pipe-line-*"
      - "koris-pipe-line-*-admin.conf"

integration-test:
  stage: integration-test
  image: oz123/koris-alpine:0.1.1
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  artifacts:
    paths:
    - tests/koris_test.yml
    expire_in: 1 week
  script:
  - apk add --update py3-cryptography python3-dev libffi-dev libressl-dev make
  - "pip3 install  -r requirements.txt"
  - "pip3 install -e ."
  - make integration-run
  - make integration-wait
  - make integration-patch-wait
  - make integration-expose
  - make expose-wait
  - make curl-run
  - make clean-lb

master-security-checks:
  stage: master-security-checks
  image: mleiner/kolt-base:0.2
  dependencies:
    - integration-test
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  script:
  - "pip3 install -r requirements.txt"
  - "pip3 install -e ."
  - "mkdir  koris-install  && cd koris-install && python3 -m venv koris-env"
  - "source ./koris-env/bin/activate"
  - "cd -"
  - "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && mv kubectl /usr/local/bin/kubectl  && chmod  777  /usr/local/bin/kubectl"
  - kubectl get services
  - kubectl get pods
  - 'kubectl run --rm -i -t kube-bench-master --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \"apiVersion\": \"v1\", \"spec\": { \"hostPID\": true, \"nodeSelector\": { \"node-role.kubernetes.io/master\": \"true\" }, \"tolerations\": [ { \"key\": \"node-role.kubernetes.io/master\", \"operator\": \"Exists\", \"effect\": \"NoSchedule\" } ] } }" -- master --version 1.8'

cleanup:
  stage: cleanup
  image: oz123/koris-alpine:0.1.1
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  script:
  - apk add make
  - "pip3 install  -r requirements.txt"
  - "pip3 install -e ."
  - make update-config
  - make clean-cluster
  when: always

pages:
  stage: pages
  image: oz123/koris-alpine:0.1.1
  script:
  - pip3 install sphinx sphinx_rtd_theme sphinx_autobuild
  - which sphinx-build
  - make -C docs html
  - mv docs/_build/html/ public/
  artifacts:
    paths:
    - public
  only:
  - master
